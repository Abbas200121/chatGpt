{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\chatGpt\\\\frontend\\\\src\\\\pages\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { useNavigate } from \"react-router-dom\";\nimport { getChats, createNewChat, getMessages, sendMessage } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst botName = \"Chatbot\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [chatId, setChatId] = useState(null); // ✅ Store the selected chat ID\n  const [chats, setChats] = useState([]); // ✅ Store all previous chats\n  const [loading, setLoading] = useState(false); // ✅ Track loading state for messages\n  const messagesEndRef = useRef(null);\n  const navigate = useNavigate();\n\n  // ✅ Fetch user's chat sessions on mount\n  const fetchChats = useCallback(async () => {\n    try {\n      const data = await getChats();\n      if (data.chats.length > 0) {\n        setChats(data.chats);\n        setChatId(data.chats[0].id); // ✅ Default to the first chat\n        fetchMessages(data.chats[0].id);\n      }\n    } catch (error) {\n      console.error(\"Error fetching chats:\", error);\n    }\n  }, []);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    console.log(\"Chatbot: Checking token in localStorage:\", token); // ✅ Log token\n\n    if (!token) {\n      console.warn(\"No token found! Redirecting to login...\");\n      navigate(\"/\");\n    } else {\n      fetchChats(); // ✅ Load chats if logged in\n    }\n  }, [navigate, fetchChats]);\n\n  // ✅ Automatically scroll to the latest message\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // ✅ Fetch messages for the selected chat\n  const fetchMessages = async selectedChatId => {\n    try {\n      setLoading(true);\n      const data = await getMessages(selectedChatId);\n      const formattedMessages = data.messages.map(msg => [{\n        text: msg.content,\n        isUser: true\n      }, {\n        text: msg.response,\n        isUser: false\n      }]).flat();\n      setMessages(formattedMessages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ✅ Create a new chat session\n  const handleNewChat = async () => {\n    try {\n      const response = await createNewChat();\n      const newChat = {\n        id: response.chat_id\n      };\n      setChats(prevChats => [...prevChats, newChat]);\n      setChatId(newChat.id);\n      setMessages([]); // ✅ Clear previous messages when creating a new chat\n    } catch (error) {\n      console.error(\"Error creating new chat:\", error);\n    }\n  };\n\n  // ✅ Send a message in the selected chat\n  const handleSend = async () => {\n    if (!userMessage.trim() || !chatId) return; // ✅ Ensure chat ID is valid\n    setMessages(prev => [...prev, {\n      text: userMessage,\n      isUser: true\n    }]);\n    setUserMessage(\"\");\n    try {\n      const response = await sendMessage(chatId, userMessage);\n      if (response) {\n        setMessages(prev => [...prev, {\n          text: response.response,\n          isUser: false\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setMessages(prev => [...prev, {\n        text: `Error: ${error.message}`,\n        isUser: false\n      }]);\n    }\n  };\n\n  // ✅ Logout and return to login page\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-lg w-full bg-gray-800 p-6 rounded-lg shadow-lg relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center text-2xl font-bold mb-4\",\n        children: [\"Chat with \", botName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        className: \"absolute top-4 right-4 p-2 bg-red-500 text-white rounded-lg\",\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex space-x-2 mb-4\",\n        children: [chats.map(chat => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setChatId(chat.id);\n            fetchMessages(chat.id);\n          },\n          className: `p-2 rounded-lg ${chat.id === chatId ? \"bg-blue-500 text-white\" : \"bg-gray-600\"}`,\n          children: [\"Chat \", chat.id]\n        }, chat.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewChat,\n          className: \"p-2 bg-green-500 rounded-lg text-white\",\n          children: \"New Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-96 overflow-y-auto p-4 space-y-4 bg-gray-700 rounded-lg\",\n        children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-center text-gray-400\",\n          children: \"Loading messages...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 23\n        }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0,\n            x: msg.isUser ? 50 : -50\n          },\n          animate: {\n            opacity: 1,\n            x: 0\n          },\n          transition: {\n            duration: 0.3\n          },\n          className: `p-3 rounded-lg max-w-xs ${msg.isUser ? \"bg-blue-500 text-white ml-auto\" : \"bg-gray-600 text-white\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.isUser ? \"You\" : botName, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), \" \", msg.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userMessage,\n          onChange: e => setUserMessage(e.target.value),\n          onKeyDown: e => e.key === \"Enter\" && handleSend(),\n          placeholder: \"Type your message...\",\n          className: \"flex-1 p-3 text-white bg-gray-700 rounded-lg outline-none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          className: \"ml-2 p-2 bg-blue-500 rounded-full text-white\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"G/IhlMOTjfF7UoFg4AAyCSH120Q=\", false, function () {\n  return [useNavigate];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","useNavigate","getChats","createNewChat","getMessages","sendMessage","jsxDEV","_jsxDEV","botName","Chatbot","_s","messages","setMessages","userMessage","setUserMessage","chatId","setChatId","chats","setChats","loading","setLoading","messagesEndRef","navigate","fetchChats","data","length","id","fetchMessages","error","console","token","localStorage","getItem","log","warn","_messagesEndRef$curre","current","scrollIntoView","behavior","selectedChatId","formattedMessages","map","msg","text","content","isUser","response","flat","handleNewChat","newChat","chat_id","prevChats","handleSend","trim","prev","message","handleLogout","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","chat","index","div","initial","opacity","x","animate","transition","duration","ref","type","value","onChange","e","target","onKeyDown","key","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/moham/chatGpt/frontend/src/pages/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getChats, createNewChat, getMessages, sendMessage } from \"../services/api\"; \r\n\r\nconst botName = \"Chatbot\";\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [userMessage, setUserMessage] = useState(\"\");\r\n  const [chatId, setChatId] = useState(null); // ✅ Store the selected chat ID\r\n  const [chats, setChats] = useState([]); // ✅ Store all previous chats\r\n  const [loading, setLoading] = useState(false); // ✅ Track loading state for messages\r\n  const messagesEndRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  // ✅ Fetch user's chat sessions on mount\r\n  const fetchChats = useCallback(async () => {\r\n    try {\r\n      const data = await getChats();\r\n      if (data.chats.length > 0) {\r\n        setChats(data.chats);\r\n        setChatId(data.chats[0].id); // ✅ Default to the first chat\r\n        fetchMessages(data.chats[0].id);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching chats:\", error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n  \r\n    console.log(\"Chatbot: Checking token in localStorage:\", token); // ✅ Log token\r\n  \r\n    if (!token) {\r\n      console.warn(\"No token found! Redirecting to login...\");\r\n      navigate(\"/\");\r\n    } else {\r\n      fetchChats(); // ✅ Load chats if logged in\r\n    }\r\n  }, [navigate, fetchChats]);\r\n\r\n  // ✅ Automatically scroll to the latest message\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  // ✅ Fetch messages for the selected chat\r\n  const fetchMessages = async (selectedChatId) => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await getMessages(selectedChatId);\r\n      const formattedMessages = data.messages.map((msg) => [\r\n        { text: msg.content, isUser: true },\r\n        { text: msg.response, isUser: false },\r\n      ]).flat();\r\n      setMessages(formattedMessages);\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // ✅ Create a new chat session\r\n  const handleNewChat = async () => {\r\n    try {\r\n      const response = await createNewChat();\r\n      const newChat = { id: response.chat_id };\r\n      setChats((prevChats) => [...prevChats, newChat]);\r\n      setChatId(newChat.id);\r\n      setMessages([]); // ✅ Clear previous messages when creating a new chat\r\n    } catch (error) {\r\n      console.error(\"Error creating new chat:\", error);\r\n    }\r\n  };\r\n\r\n  // ✅ Send a message in the selected chat\r\n  const handleSend = async () => {\r\n    if (!userMessage.trim() || !chatId) return; // ✅ Ensure chat ID is valid\r\n    setMessages((prev) => [...prev, { text: userMessage, isUser: true }]);\r\n    setUserMessage(\"\");\r\n\r\n    try {\r\n      const response = await sendMessage(chatId, userMessage);\r\n      if (response) {\r\n        setMessages((prev) => [...prev, { text: response.response, isUser: false }]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n      setMessages((prev) => [...prev, { text: `Error: ${error.message}`, isUser: false }]);\r\n    }\r\n  };\r\n\r\n  // ✅ Logout and return to login page\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-900 text-white p-4\">\r\n      <div className=\"max-w-lg w-full bg-gray-800 p-6 rounded-lg shadow-lg relative\">\r\n        <h2 className=\"text-center text-2xl font-bold mb-4\">Chat with {botName}</h2>\r\n\r\n        {/* Logout Button */}\r\n        <button onClick={handleLogout} className=\"absolute top-4 right-4 p-2 bg-red-500 text-white rounded-lg\">\r\n          Logout\r\n        </button>\r\n\r\n        {/* Chat Selection */}\r\n        <div className=\"flex space-x-2 mb-4\">\r\n          {chats.map((chat) => (\r\n            <button\r\n              key={chat.id}\r\n              onClick={() => {\r\n                setChatId(chat.id);\r\n                fetchMessages(chat.id);\r\n              }}\r\n              className={`p-2 rounded-lg ${chat.id === chatId ? \"bg-blue-500 text-white\" : \"bg-gray-600\"}`}\r\n            >\r\n              Chat {chat.id}\r\n            </button>\r\n          ))}\r\n          <button onClick={handleNewChat} className=\"p-2 bg-green-500 rounded-lg text-white\">\r\n            New Chat\r\n          </button>\r\n        </div>\r\n\r\n        {/* Chat Messages */}\r\n        <div className=\"h-96 overflow-y-auto p-4 space-y-4 bg-gray-700 rounded-lg\">\r\n          {loading && <p className=\"text-center text-gray-400\">Loading messages...</p>}\r\n          {messages.map((msg, index) => (\r\n            <motion.div\r\n              key={index}\r\n              initial={{ opacity: 0, x: msg.isUser ? 50 : -50 }}\r\n              animate={{ opacity: 1, x: 0 }}\r\n              transition={{ duration: 0.3 }}\r\n              className={`p-3 rounded-lg max-w-xs ${msg.isUser ? \"bg-blue-500 text-white ml-auto\" : \"bg-gray-600 text-white\"}`}\r\n            >\r\n              <strong>{msg.isUser ? \"You\" : botName}:</strong> {msg.text}\r\n            </motion.div>\r\n          ))}\r\n          <div ref={messagesEndRef} />\r\n        </div>\r\n\r\n        {/* Message Input */}\r\n        <div className=\"flex items-center mt-4\">\r\n          <input\r\n            type=\"text\"\r\n            value={userMessage}\r\n            onChange={(e) => setUserMessage(e.target.value)}\r\n            onKeyDown={(e) => e.key === \"Enter\" && handleSend()}\r\n            placeholder=\"Type your message...\"\r\n            className=\"flex-1 p-3 text-white bg-gray-700 rounded-lg outline-none\"\r\n          />\r\n          <button onClick={handleSend} className=\"ml-2 p-2 bg-blue-500 rounded-full text-white\">\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}