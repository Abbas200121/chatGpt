{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\moham\\\\message-app\\\\src\\\\components\\\\MessageList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageList = ({\n  messages\n}) => {\n  _s();\n  const messagesEndRef = useRef(null);\n  const [animatedMessages, setAnimatedMessages] = useState([]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  useEffect(() => {\n    if (messages.length === 0) return;\n    const lastMessage = messages[messages.length - 1];\n\n    // If last message is from AI and has fullText, animate it\n    if (!lastMessage.isUser && lastMessage.fullText) {\n      let index = 0;\n      const text = lastMessage.fullText;\n      setAnimatedMessages(prev => [...prev, {\n        text: \"\",\n        isUser: false\n      }]);\n      const typingInterval = setInterval(() => {\n        setAnimatedMessages(prev => {\n          const newMessages = [...prev];\n          newMessages[newMessages.length - 1] = {\n            text: text.substring(0, index + 1),\n            isUser: false\n          };\n          return newMessages;\n        });\n        index++;\n        if (index >= text.length) {\n          clearInterval(typingInterval);\n        }\n      }, 50); // Adjust speed of typing animation\n    } else {\n      setAnimatedMessages(messages);\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-96 overflow-y-auto p-4 space-y-4 bg-gray-800 rounded-lg w-full max-w-lg\",\n    children: [animatedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        x: msg.isUser ? 50 : -50\n      },\n      animate: {\n        opacity: 1,\n        x: 0\n      },\n      transition: {\n        duration: 0.3\n      },\n      className: `p-3 rounded-lg max-w-xs ${msg.isUser ? \"bg-blue-500 text-white ml-auto\" : \"bg-gray-700 text-white\"}`,\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [msg.isUser ? \"You\" : \"AI\", \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), \" \", msg.text]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageList, \"/cfOCEKIMBx1p7IvtNaqOVSj/m4=\");\n_c = MessageList;\nexport default MessageList;\nvar _c;\n$RefreshReg$(_c, \"MessageList\");","map":{"version":3,"names":["React","useEffect","useRef","useState","motion","jsxDEV","_jsxDEV","MessageList","messages","_s","messagesEndRef","animatedMessages","setAnimatedMessages","_messagesEndRef$curre","current","scrollIntoView","behavior","length","lastMessage","isUser","fullText","index","text","prev","typingInterval","setInterval","newMessages","substring","clearInterval","className","children","map","msg","div","initial","opacity","x","animate","transition","duration","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/moham/message-app/src/components/MessageList.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst MessageList = ({ messages }) => {\r\n  const messagesEndRef = useRef(null);\r\n  const [animatedMessages, setAnimatedMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    if (messages.length === 0) return;\r\n\r\n    const lastMessage = messages[messages.length - 1];\r\n\r\n    // If last message is from AI and has fullText, animate it\r\n    if (!lastMessage.isUser && lastMessage.fullText) {\r\n      let index = 0;\r\n      const text = lastMessage.fullText;\r\n\r\n      setAnimatedMessages((prev) => [...prev, { text: \"\", isUser: false }]);\r\n\r\n      const typingInterval = setInterval(() => {\r\n        setAnimatedMessages((prev) => {\r\n          const newMessages = [...prev];\r\n          newMessages[newMessages.length - 1] = {\r\n            text: text.substring(0, index + 1),\r\n            isUser: false,\r\n          };\r\n          return newMessages;\r\n        });\r\n\r\n        index++;\r\n        if (index >= text.length) {\r\n          clearInterval(typingInterval);\r\n        }\r\n      }, 50); // Adjust speed of typing animation\r\n    } else {\r\n      setAnimatedMessages(messages);\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"h-96 overflow-y-auto p-4 space-y-4 bg-gray-800 rounded-lg w-full max-w-lg\">\r\n      {animatedMessages.map((msg, index) => (\r\n        <motion.div\r\n          key={index}\r\n          initial={{ opacity: 0, x: msg.isUser ? 50 : -50 }}\r\n          animate={{ opacity: 1, x: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n          className={`p-3 rounded-lg max-w-xs ${\r\n            msg.isUser ? \"bg-blue-500 text-white ml-auto\" : \"bg-gray-700 text-white\"\r\n          }`}\r\n        >\r\n          <strong>{msg.isUser ? \"You\" : \"AI\"}:</strong> {msg.text}\r\n        </motion.div>\r\n      ))}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAMC,cAAc,GAAGR,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5DF,SAAS,CAAC,MAAM;IAAA,IAAAY,qBAAA;IACd,CAAAA,qBAAA,GAAAH,cAAc,CAACI,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;EAEdP,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,CAACS,MAAM,KAAK,CAAC,EAAE;IAE3B,MAAMC,WAAW,GAAGV,QAAQ,CAACA,QAAQ,CAACS,MAAM,GAAG,CAAC,CAAC;;IAEjD;IACA,IAAI,CAACC,WAAW,CAACC,MAAM,IAAID,WAAW,CAACE,QAAQ,EAAE;MAC/C,IAAIC,KAAK,GAAG,CAAC;MACb,MAAMC,IAAI,GAAGJ,WAAW,CAACE,QAAQ;MAEjCR,mBAAmB,CAAEW,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE;QAAED,IAAI,EAAE,EAAE;QAAEH,MAAM,EAAE;MAAM,CAAC,CAAC,CAAC;MAErE,MAAMK,cAAc,GAAGC,WAAW,CAAC,MAAM;QACvCb,mBAAmB,CAAEW,IAAI,IAAK;UAC5B,MAAMG,WAAW,GAAG,CAAC,GAAGH,IAAI,CAAC;UAC7BG,WAAW,CAACA,WAAW,CAACT,MAAM,GAAG,CAAC,CAAC,GAAG;YACpCK,IAAI,EAAEA,IAAI,CAACK,SAAS,CAAC,CAAC,EAAEN,KAAK,GAAG,CAAC,CAAC;YAClCF,MAAM,EAAE;UACV,CAAC;UACD,OAAOO,WAAW;QACpB,CAAC,CAAC;QAEFL,KAAK,EAAE;QACP,IAAIA,KAAK,IAAIC,IAAI,CAACL,MAAM,EAAE;UACxBW,aAAa,CAACJ,cAAc,CAAC;QAC/B;MACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACV,CAAC,MAAM;MACLZ,mBAAmB,CAACJ,QAAQ,CAAC;IAC/B;EACF,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,oBACEF,OAAA;IAAKuB,SAAS,EAAC,2EAA2E;IAAAC,QAAA,GACvFnB,gBAAgB,CAACoB,GAAG,CAAC,CAACC,GAAG,EAAEX,KAAK,kBAC/Bf,OAAA,CAACF,MAAM,CAAC6B,GAAG;MAETC,OAAO,EAAE;QAAEC,OAAO,EAAE,CAAC;QAAEC,CAAC,EAAEJ,GAAG,CAACb,MAAM,GAAG,EAAE,GAAG,CAAC;MAAG,CAAE;MAClDkB,OAAO,EAAE;QAAEF,OAAO,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAE;MAC9BE,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE;MAC9BV,SAAS,EAAE,2BACTG,GAAG,CAACb,MAAM,GAAG,gCAAgC,GAAG,wBAAwB,EACvE;MAAAW,QAAA,gBAEHxB,OAAA;QAAAwB,QAAA,GAASE,GAAG,CAACb,MAAM,GAAG,KAAK,GAAG,IAAI,EAAC,GAAC;MAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAACX,GAAG,CAACV,IAAI;IAAA,GARlDD,KAAK;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASA,CACb,CAAC,eACFrC,OAAA;MAAKsC,GAAG,EAAElC;IAAe;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAAClC,EAAA,CA1DIF,WAAW;AAAAsC,EAAA,GAAXtC,WAAW;AA4DjB,eAAeA,WAAW;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}